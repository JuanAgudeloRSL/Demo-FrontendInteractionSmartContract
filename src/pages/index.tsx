import { ConnectButton } from '@rainbow-me/rainbowkit'
import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useState } from 'react'
import { useReadContract, useWriteContract } from 'wagmi'

// Contract ABI
const contractABI = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'store',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'retrieve',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

// Contract Address (change it for deployed contract address)
const contractAddress = '0x6CB2d36c5247B0D005981baAce0980AEBAc5C85C'

const Home: NextPage = () => {
  const [inputValue, setInputValue] = useState<number>(0); 
  const [storedValue, setStoredValue] = useState<number | null>(null);
  const { data: hash, writeContract, isSuccess, isPending, isError } = useWriteContract()
  const {
    data: retrievedValue,
    error: errorRetrieve,
    isPending: isPendingRetrieve,
  } = useReadContract({
    address: contractAddress,
    abi: contractABI,
    functionName: 'retrieve',
    args: [],
    chainId: 31,
  })

  const handleRetrieve = async () => {
    if (retrievedValue) {
      setStoredValue(Number(retrievedValue));
    }
  };
  const hadleWriteContract = async () => {
    console.log('recording new value: ', inputValue);
    writeContract({
      address: contractAddress,
      abi: contractABI,
      functionName: 'store',
      args: [inputValue],
    })
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>
          Connect DApp to a Basic Smart Contract
        </h1>

        <section className={styles.card}>
          <h2>Store a Value</h2>
          <input
            type="number"
            value={inputValue}
            onChange={(e) => setInputValue(Number(e.target.value))}
            placeholder="Enter a value"
          />
          <button onClick={hadleWriteContract} disabled={isPending || isError}>
            {isPending ? 'Storing...' : 'Store Value'}
          </button>
          {isSuccess && hash && <p>{`Function executed \n with hash ${hash}`}</p>}
        </section>

        <section className={styles.card}>
          <h2>Retrieve Stored Value</h2>
          <button onClick={handleRetrieve}>
            Retrieve Stored Value
          </button>
          {storedValue !== null && <p>Stored value: {storedValue}</p>}
        </section>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Rootstock Team ❤️
        </a>
      </footer>
    </div>
  );
};

export default Home
